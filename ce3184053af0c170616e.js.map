{"version":3,"file":"ce3184053af0c170616e.js","mappings":"yBACAA,KAAKC,UAAY,SAAUC,GAEd,YADDA,EAAEC,KAAKC,MAEPC,EAAUC,YAAYJ,EAAEC,KAAKI,OAGzC,EACA,IAAIF,EAAY,CACZC,YAAa,SAAUC,GACnB,IAAIC,EAAaH,EAAUI,QAAQF,GAC/BG,EAAgBL,EAAUM,WAAWH,GACzCR,KAAKY,YAAY,CAAEL,OAAQG,EAAeN,KAAM,aACpD,EACAK,QAAS,SAAUF,GACf,IAAIJ,EAAO,IAAIU,aAAaN,GACxBO,EAAWC,KAAKC,MAAMb,EAAKc,QAAU,KAAQ,QAC7CC,EAAU,IAAIL,aAAaC,GAC3BK,GAAgBhB,EAAKc,OAAS,IAAMH,EAAW,GACnDI,EAAQ,GAAKf,EAAK,GAClB,IAAK,IAAIiB,EAAI,EAAGA,EAAIN,EAAW,EAAGM,IAAK,CACnC,IAAIC,EAAMD,EAAID,EACVG,EAASC,OAAOR,KAAKS,MAAMH,GAAKI,WAChCC,EAAQH,OAAOR,KAAKY,KAAKN,GAAKI,WAC9BG,EAAUP,EAAMC,EACpBJ,EAAQE,GAAKjB,EAAKmB,IAAWnB,EAAKuB,GAASvB,EAAKmB,IAAWM,CAC/D,CAEA,OADAV,EAAQJ,EAAW,GAAKX,EAAKA,EAAKc,OAAS,GACpCC,CACX,EACAP,WAAY,SAAUkB,GAKlB,IAJA,IAAIC,EAA4B,EAAfD,EAAMZ,OACnBc,EAAa,IAAIC,YAAYF,GAC7BG,EAAW,IAAIC,SAASH,GACxBI,EAAS,EACJf,EAAI,EAAGA,EAAIS,EAAMZ,OAAQG,IAAKe,GAAU,EAAG,CAChD,IAAIC,EAAIrB,KAAKsB,KAAK,EAAGtB,KAAKuB,IAAI,EAAGT,EAAMT,KACvCa,EAASM,SAASJ,EAAQC,EAAI,EAAQ,MAAJA,EAAgB,MAAJA,GAAW,EAC7D,CACA,OAAOI,MAAMC,KAAK,IAAIC,UAAUT,EAAS1B,QAC7C,EACAoC,SAAU,SAAUpC,GAIhB,IAHA,IAAIqC,EAAS,GACTC,EAAQ,IAAIC,WAAWvC,GACvBwC,EAAMF,EAAMG,WACP5B,EAAI,EAAGA,EAAI2B,EAAK3B,IACrBwB,GAAUK,OAAOC,aAAaL,EAAMzB,IAExC,OAAO+B,OAAOC,KAAKR,EACvB,E","sources":["webpack://numberic-ring-score/./src/video.worker.ts"],"sourcesContent":["\"use strict\";\nself.onmessage = function (e) {\n    switch (e.data.type) {\n        case \"pending\":\n            transform.transaction(e.data.buffer);\n            break;\n    }\n};\nvar transform = {\n    transaction: function (buffer) {\n        var bufTo16kHz = transform.to16kHz(buffer);\n        var bufTo16BitPCM = transform.to16BitPCM(bufTo16kHz);\n        self.postMessage({ buffer: bufTo16BitPCM, type: \"transform\" });\n    },\n    to16kHz: function (buffer) {\n        var data = new Float32Array(buffer);\n        var fitCount = Math.round(data.length * (16000 / 44100));\n        var newData = new Float32Array(fitCount);\n        var springFactor = (data.length - 1) / (fitCount - 1);\n        newData[0] = data[0];\n        for (var i = 1; i < fitCount - 1; i++) {\n            var tmp = i * springFactor;\n            var before = Number(Math.floor(tmp).toFixed());\n            var after = Number(Math.ceil(tmp).toFixed());\n            var atPoint = tmp - before;\n            newData[i] = data[before] + (data[after] - data[before]) * atPoint;\n        }\n        newData[fitCount - 1] = data[data.length - 1];\n        return newData;\n    },\n    to16BitPCM: function (input) {\n        var dataLength = input.length * (16 / 8);\n        var dataBuffer = new ArrayBuffer(dataLength);\n        var dataView = new DataView(dataBuffer);\n        var offset = 0;\n        for (var i = 0; i < input.length; i++, offset += 2) {\n            var s = Math.max(-1, Math.min(1, input[i]));\n            dataView.setInt16(offset, s < 0 ? s * 32768 : s * 32767, true);\n        }\n        return Array.from(new Int8Array(dataView.buffer));\n    },\n    toBase64: function (buffer) {\n        var binary = \"\";\n        var bytes = new Uint8Array(buffer);\n        var len = bytes.byteLength;\n        for (var i = 0; i < len; i++) {\n            binary += String.fromCharCode(bytes[i]);\n        }\n        return window.btoa(binary);\n    },\n};\n"],"names":["self","onmessage","e","data","type","transform","transaction","buffer","bufTo16kHz","to16kHz","bufTo16BitPCM","to16BitPCM","postMessage","Float32Array","fitCount","Math","round","length","newData","springFactor","i","tmp","before","Number","floor","toFixed","after","ceil","atPoint","input","dataLength","dataBuffer","ArrayBuffer","dataView","DataView","offset","s","max","min","setInt16","Array","from","Int8Array","toBase64","binary","bytes","Uint8Array","len","byteLength","String","fromCharCode","window","btoa"],"sourceRoot":""}